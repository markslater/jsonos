<!--
  ~ Copyright 2013 Mark Slater
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
  ~
  ~ 	http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
  -->

<project name="jsonos" default="compile">

    <description>
        Jsonos build file
    </description>

    <property name="location.lib" value="lib"/>
    <!--<property name="location.documentation" value="docs"/>-->
    <property name="location.src" value="src/main"/>
    <!--<property name="location.src.documentation" value="src/documentation"/>-->
    <property name="location.src.test-support" value="src/test-support"/>
    <property name="location.src.test" value="src/test-unit"/>
    <!--<property name="location.src.integration-test" value="src/test-integration"/>-->

    <property name="location.build" value="build"/>
    <property name="location.classes" value="${location.build}/classes"/>
    <!--<property name="location.documentationclasses" value="${location.build}/documentation-classes"/>-->
    <property name="location.optimisedclasses" value="${location.build}/optimised-classes"/>
    <property name="location.test-support-classes" value="${location.build}/test-support-classes"/>
    <property name="location.testclasses" value="${location.build}/test-classes"/>
    <!--<property name="location.integration-testclasses" value="${location.build}/integration-test-classes"/>-->
    <property name="location.testresults" value="${location.build}/test-results"/>
    <!--<property name="location.integration-testresults" value="${location.build}/integration-test-results"/>-->

    <property name="location.dist" value="${location.build}/dist"/>
    <!--<property name="location.dist.maven" value="${location.dist}/maven"/>-->

    <!--<property name="maven-staging-repository-id" value="sonatype-nexus-staging"/>-->
    <!--<property name="maven-staging-repository-url" value="https://oss.sonatype.org/service/local/staging/deploy/maven2"/>-->

    <path id="all-libs">
        <fileset dir="${location.lib}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="test-compile-libs">
        <fileset dir="${location.lib}/test">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="build-libs">
        <fileset dir="${location.lib}/build">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="shipped-libs">
        <fileset dir="${location.lib}/shipped">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!--<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant">-->
    <!--<classpath>-->
    <!--<pathelement location="${location.lib}/build/maven-ant-tasks-2.1.3.jar"/>-->
    <!--</classpath>-->
    <!--</typedef>-->

    <target name="compile" description="compiles all classes">
        <echo message="Starting compile"/>
        <delete dir="${location.classes}"/>
        <mkdir dir="${location.classes}"/>
        <!--<delete dir="${location.documentationclasses}"/>-->
        <!--<mkdir dir="${location.documentationclasses}"/>-->
        <delete dir="${location.optimisedclasses}"/>
        <mkdir dir="${location.optimisedclasses}"/>
        <delete dir="${location.test-support-classes}"/>
        <mkdir dir="${location.test-support-classes}"/>
        <delete dir="${location.testclasses}"/>
        <mkdir dir="${location.testclasses}"/>
        <!--<delete dir="${location.integration-testclasses}"/>-->
        <!--<mkdir dir="${location.integration-testclasses}"/>-->

        <javac destdir="${location.classes}" debug="on" source="1.6" target="1.6" includeantruntime="false">
            <src path="${location.src}"/>
            <classpath refid="shipped-libs"/>
        </javac>

        <javac destdir="${location.optimisedclasses}" debug="on" optimize="true" source="1.6" target="1.6"
               includeantruntime="false">
            <src path="${location.src}"/>
            <classpath refid="shipped-libs"/>
        </javac>

        <!--<javac destdir="${location.documentationclasses}" debug="on" source="1.6" target="1.6"-->
        <!--includeantruntime="false">-->
        <!--<src path="${location.src.documentation}"/>-->
        <!--<classpath location="${location.classes}"/>-->
        <!--<classpath refid="shipped-libs"/>-->
        <!--<classpath refid="build-libs"/>-->
        <!--</javac>-->

        <javac destdir="${location.test-support-classes}" debug="on" source="1.6" target="1.6"
               includeantruntime="false">
            <src path="${location.src.test-support}"/>
            <classpath location="${location.classes}"/>
            <classpath refid="shipped-libs"/>
            <classpath refid="test-compile-libs"/>
        </javac>

        <javac destdir="${location.testclasses}" debug="on" source="1.6" target="1.6" includeantruntime="false">
            <src path="${location.src.test}"/>
            <classpath location="${location.classes}"/>
            <classpath location="${location.test-support-classes}"/>
            <classpath refid="shipped-libs"/>
            <classpath refid="test-compile-libs"/>
        </javac>

        <!--<javac destdir="${location.integration-testclasses}" debug="on" source="1.6" target="1.6"-->
        <!--includeantruntime="false">-->
        <!--<src path="${location.src.integration-test}"/>-->
        <!--<classpath location="${location.classes}"/>-->
        <!--<classpath location="${location.test-support-classes}"/>-->
        <!--<classpath refid="shipped-libs"/>-->
        <!--<classpath refid="test-compile-libs"/>-->
        <!--</javac>-->

        <copy todir="${location.classes}">
            <fileset dir="src/main"/>
        </copy>

        <echo message="Finished compile"/>
    </target>

    <target name="test" depends="test-unit, test-integration" description="builds and runs all tests"/>

    <target name="test-unit" depends="compile" description="builds and runs unit tests">
        <delete dir="${location.testresults}"/>
        <mkdir dir="${location.testresults}"/>
        <junit printsummary="yes" errorproperty="unittestfailure" failureproperty="unittestfailure">
            <classpath>
                <pathelement location="${location.testclasses}"/>
                <pathelement location="${location.classes}"/>
                <pathelement location="${location.test-support-classes}"/>
                <path refid="shipped-libs"/>
                <path refid="test-compile-libs"/>
            </classpath>
            <batchtest fork="yes" todir="${location.testresults}">
                <fileset dir="${location.testclasses}">
                    <include name="**/*Test.class"/>
                </fileset>
                <formatter type="xml"/>
            </batchtest>
        </junit>

        <junitreport todir="${location.testresults}">
            <fileset dir="${location.testresults}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report todir="${location.testresults}"/>
        </junitreport>

        <fail if="unittestfailure" message="Unit tests failed."/>
    </target>

    <target name="test-integration" depends="compile" description="builds and runs unit tests">
        <!--<delete dir="${location.integration-testresults}"/>-->
        <!--<mkdir dir="${location.integration-testresults}"/>-->
        <!--<junit printsummary="yes" errorproperty="integrationtestfailure" failureproperty="integrationtestfailure">-->
        <!--<classpath>-->
        <!--<pathelement location="${location.integration-testclasses}"/>-->
        <!--<pathelement location="${location.classes}"/>-->
        <!--<pathelement location="${location.test-support-classes}"/>-->
        <!--<path refid="shipped-libs"/>-->
        <!--<path refid="test-compile-libs"/>-->
        <!--</classpath>-->
        <!--<batchtest fork="yes" todir="${location.integration-testresults}">-->
        <!--<fileset dir="${location.integration-testclasses}">-->
        <!--<include name="**/*Test.class"/>-->
        <!--</fileset>-->
        <!--<formatter type="xml"/>-->
        <!--</batchtest>-->
        <!--</junit>-->

        <!--<junitreport todir="${location.integration-testresults}">-->
        <!--<fileset dir="${location.integration-testresults}">-->
        <!--<include name="TEST-*.xml"/>-->
        <!--</fileset>-->
        <!--<report todir="${location.integration-testresults}"/>-->
        <!--</junitreport>-->

        <!--<fail if="integrationtestfailure" message="Integration tests failed."/>-->
    </target>

    <target name="documentation">
        <!--<property name="location.dist.documentation" value="${location.dist}/documentation/${version}"/>-->
        <!--<mkdir dir="${location.dist.documentation}"/>-->
        <!--<copy todir="${location.dist.documentation}">-->
        <!--<fileset dir="${location.documentation}" excludes="**/*.html"/>-->
        <!--</copy>-->
        <!--<typedef name="rasterize" classname="org.apache.tools.ant.taskdefs.optional.RasterizerTask">-->
        <!--<classpath>-->
        <!--<pathelement location="${location.lib}/build/RasterizerTask.jar"/>-->
        <!--<pathelement location="${location.lib}/build/batik-all.jar"/>-->
        <!--<pathelement location="${location.lib}/build/xml-apis-ext.jar"/>-->
        <!--</classpath>-->
        <!--</typedef>-->
        <!--<rasterize result="image/png" src="resources/favicon.svg"-->
        <!--dest="${location.dist.documentation}/favicon-32x32.png" classname="jaxp"/>-->
        <!--<rasterize result="image/png" src="resources/favicon.svg"-->
        <!--dest="${location.dist}/favicon-64x64.png" classname="jaxp" height="64" width="64"/>-->
        <!--<taskdef name="svg2ico" classname="net.sourceforge.svg2ico.Svg2IcoTask"-->
        <!--classpath="${location.lib}/build/svg2ico-0.14.jar"/>-->
        <!--<svg2ico src="resources/favicon.svg" dest="${location.dist.documentation}/favicon.ico" width="32" height="32"/>-->
        <!--<java classname="net.sourceforge.jsonos.documentation.DocumentationGenerator" failonerror="true" fork="true">-->
        <!--<arg value="${location.dist}/documentation/${version}"/>-->
        <!--<classpath>-->
        <!--<pathelement path="${location.classes}"/>-->
        <!--<pathelement path="${location.documentationclasses}"/>-->
        <!--<path refid="build-libs"/>-->
        <!--</classpath>-->
        <!--</java>-->
        <!--<mkdir dir="${location.dist.documentation}/javadoc"/>-->
        <!--<javadoc destdir="${location.dist.documentation}/javadoc" windowtitle="Jsonos version ${version}"-->
        <!--doctitle="Jsonos version ${version}">-->
        <!--<sourcepath path="${location.src}"/>-->
        <!--</javadoc>-->
    </target>

    <target name="pom">
        <!--<mkdir dir="${location.dist.maven}"/>-->
        <!--<java classname="net.sourceforge.jsonos.maven.PomGenerator" failonerror="true" fork="true">-->
        <!--<arg value="${location.dist.maven}"/>-->
        <!--<arg value="${maven-staging-repository-id}"/>-->
        <!--<arg value="${sonatype.username}"/>-->
        <!--<arg value="${sonatype.password}"/>-->
        <!--<arg value="${gpg.passphrase}"/>-->
        <!--<classpath>-->
        <!--<pathelement path="${location.documentationclasses}"/>-->
        <!--<path refid="build-libs"/>-->
        <!--</classpath>-->
        <!--</java>-->
    </target>

    <target name="development-version" unless="release">
        <property file="version.properties"/>
        <tstamp>
            <format property="timestamp" pattern="yyyyMMddHHmm" locale="en" timezone="UTC"/>
        </tstamp>
        <property name="version" value="${jsonos.version.major}.${jsonos.version.minor}-${timestamp}"/>
    </target>

    <target name="release-version" if="release">
        <property file="version.properties"/>
        <property name="version" value="${jsonos.version.major}.${jsonos.version.minor}"/>
    </target>

    <target name="determine-version" depends="development-version, release-version">
        <echo message="Version for build is: ${version}"/>
    </target>

    <target name="distribute" depends="compile, test, determine-version">
        <echo message="Creating release structure"/>
        <property name="location.dist.binaries" value="${location.dist}/binaries/${version}"/>
        <delete dir="${location.dist}"/>
        <mkdir dir="${location.dist.binaries}"/>

        <taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask"
                 classpath="${location.lib}/build/jarjar-1.4.jar"/>
        <jarjar basedir="${location.classes}" destfile="${location.dist.binaries}/jsonos-${version}.jar">
            <zipfileset src="${location.lib}/shipped/cling-core-1.0.5.jar"/>
            <zipfileset src="${location.lib}/shipped/commons-lang3-3.1.jar"/>
            <zipfileset src="${location.lib}/shipped/guava-14.0-rc1.jar"/>
            <zipfileset src="${location.lib}/shipped/joda-time-2.1.jar"/>
            <zipfileset src="${location.lib}/shipped/teleal-common-1.0.13.jar"/>
            <zipfileset src="${location.lib}/shipped/pi4j-core.jar"/>
            <zipfileset src="${location.lib}/shipped/pi4j-device.jar"/>
            <zipfileset src="${location.lib}/shipped/pi4j-gpio-extension.jar"/>
            <zipfileset src="${location.lib}/shipped/pi4j-service.jar"/>
            <manifest>
                <attribute name="Main-Class" value="net.sourceforge.jsonos.pi.gpio.PiAlarmSnooze"/>
            </manifest>
        </jarjar>
        <chmod file="${location.dist.binaries}/jsonos-${version}.jar" perm="u+x"/>

        <jarjar basedir="${location.optimisedclasses}" destfile="${location.dist.binaries}/jsonos-small-${version}.jar"
                compress="true">
            <zipfileset src="${location.lib}/shipped/cling-core-1.0.5.jar"/>
            <zipfileset src="${location.lib}/shipped/commons-lang3-3.1.jar"/>
            <zipfileset src="${location.lib}/shipped/guava-14.0-rc1.jar"/>
            <zipfileset src="${location.lib}/shipped/joda-time-2.1.jar"/>
            <zipfileset src="${location.lib}/shipped/teleal-common-1.0.13.jar"/>
            <zipfileset src="${location.lib}/shipped/pi4j-core.jar"/>
            <zipfileset src="${location.lib}/shipped/pi4j-device.jar"/>
            <zipfileset src="${location.lib}/shipped/pi4j-gpio-extension.jar"/>
            <zipfileset src="${location.lib}/shipped/pi4j-service.jar"/>
            <manifest>
                <attribute name="Main-Class" value="net.sourceforge.jsonos.SelfTest"/>
            </manifest>
        </jarjar>
        <chmod file="${location.dist.binaries}/jsonos-small-${version}.jar" perm="u+x"/>

        <antcall target="documentation"/>
        <antcall target="pom"/>
        <!--<jarjar basedir="${location.classes}" destfile="${location.dist.maven}/jsonos-${version}.jar">-->
        <!--<zipfileset src="${location.lib}/shipped/cling-core-1.0.5.jar"/>-->
        <!--<zipfileset src="${location.lib}/shipped/commons-lang3-3.1.jar"/>-->
        <!--<zipfileset src="${location.lib}/shipped/guava-14.0-rc1.jar"/>-->
        <!--<zipfileset src="${location.lib}/shipped/joda-time-2.1.jar"/>-->
        <!--<zipfileset src="${location.lib}/shipped/teleal-common-1.0.13.jar"/>-->
        <!--<manifest>-->
        <!--<attribute name="Main-Class" value="net.sourceforge.jsonos.SelfTest"/>-->
        <!--</manifest>-->
        <!--</jarjar>-->
        <!--<chmod file="${location.dist.maven}/jsonos-${version}.jar" perm="u+x"/>-->

        <!--<jar basedir="${location.src}"-->
        <!--destfile="${location.dist.maven}/jsonos-${version}-sources.jar"/>-->
        <!--<jar basedir="${location.dist}/documentation/${version}/javadoc"-->
        <!--destfile="${location.dist.maven}/jsonos-${version}-javadoc.jar"/>-->
    </target>

    <target name="prepare-release" description="Builds an official release locally">
        <property name="release" value="true"/>
        <antcall target="distribute"/>
    </target>

    <!--<target name="distribute-release-maven" description="deploy release version to Maven staging repository"-->
    <!--xmlns:artifact="antlib:org.apache.maven.artifact.ant">-->
    <!--<property name="release.directory.maven" value="${release.directory}/build/dist/maven"/>-->
    <!--<artifact:mvn>-->
    <!--<artifact:arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file"/>-->
    <!--<artifact:arg value="-s${release.directory.maven}/settings.xml"/>-->
    <!--<artifact:arg value="-Durl=${maven-staging-repository-url}"/>-->
    <!--<artifact:arg value="-DrepositoryId=${maven-staging-repository-id}"/>-->
    <!--<artifact:arg value="-DpomFile=${release.directory.maven}/pom.xml"/>-->
    <!--<artifact:arg value="-Dfile=${release.directory.maven}/jsonos-${version}.jar"/>-->
    <!--<artifact:arg value="-Pgpg"/>-->
    <!--&lt;!&ndash;<artifact:arg value="-X"/>&ndash;&gt;-->
    <!--</artifact:mvn>-->

    <!--&lt;!&ndash; sign and deploy the sources artifact &ndash;&gt;-->
    <!--<artifact:mvn>-->
    <!--<artifact:arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file"/>-->
    <!--<artifact:arg value="-s${release.directory.maven}/settings.xml"/>-->
    <!--<artifact:arg value="-Durl=${maven-staging-repository-url}"/>-->
    <!--<artifact:arg value="-DrepositoryId=${maven-staging-repository-id}"/>-->
    <!--<artifact:arg value="-DpomFile=${release.directory.maven}/pom.xml"/>-->
    <!--<artifact:arg value="-Dfile=${release.directory.maven}/jsonos-${version}-sources.jar"/>-->
    <!--<artifact:arg value="-Dclassifier=sources"/>-->
    <!--<artifact:arg value="-Pgpg"/>-->
    <!--&lt;!&ndash;<artifact:arg value="-X"/>&ndash;&gt;-->
    <!--</artifact:mvn>-->

    <!--&lt;!&ndash; sign and deploy the javadoc artifact &ndash;&gt;-->
    <!--<artifact:mvn>-->
    <!--<artifact:arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file"/>-->
    <!--<artifact:arg value="-s${release.directory.maven}/settings.xml"/>-->
    <!--<artifact:arg value="-Durl=${maven-staging-repository-url}"/>-->
    <!--<artifact:arg value="-DrepositoryId=${maven-staging-repository-id}"/>-->
    <!--<artifact:arg value="-DpomFile=${release.directory.maven}/pom.xml"/>-->
    <!--<artifact:arg value="-Dfile=${release.directory.maven}/jsonos-${version}-javadoc.jar"/>-->
    <!--<artifact:arg value="-Dclassifier=javadoc"/>-->
    <!--<artifact:arg value="-Pgpg"/>-->
    <!--&lt;!&ndash;<artifact:arg value="-X"/>&ndash;&gt;-->
    <!--</artifact:mvn>-->

    <!--&lt;!&ndash; close the staging repository, whatever that means &ndash;&gt;-->
    <!--<artifact:mvn>-->
    <!--<artifact:arg value="nexus:staging-close"/>-->
    <!--<artifact:arg value="-s${release.directory.maven}/settings.xml"/>-->
    <!--<artifact:arg value="-Dnexus.serverAuthId=${maven-staging-repository-id}"/>-->
    <!--<artifact:arg value="-Dnexus.url=https://oss.sonatype.org"/>-->
    <!--<artifact:arg value="-Dnexus.repositoryId=https://oss.sonatype.org"/>-->
    <!--<artifact:arg value="-Dnexus.artifactId=jsonos"/>-->
    <!--<artifact:arg value="-Dnexus.groupId=net.sourceforge.jsonos"/>-->
    <!--<artifact:arg value="-Dnexus.automatic=true"/>-->
    <!--&lt;!&ndash;<artifact:arg value="-X"/>&ndash;&gt;-->
    <!--</artifact:mvn>-->

    <!--&lt;!&ndash; release the staging repository &ndash;&gt;-->
    <!--<artifact:mvn>-->
    <!--<artifact:arg value="nexus:staging-release"/>-->
    <!--<artifact:arg value="-s${release.directory.maven}/settings.xml"/>-->
    <!--<artifact:arg value="-Dnexus.serverAuthId=${maven-staging-repository-id}"/>-->
    <!--<artifact:arg value="-Dnexus.url=https://oss.sonatype.org"/>-->
    <!--<artifact:arg value="-Dnexus.promote.autoSelectOverride=true"/>-->
    <!--<artifact:arg value="-Dnexus.automatic=true"/>-->
    <!--<artifact:arg value="-DtargetRepositoryId=releases"/>-->
    <!--&lt;!&ndash;<artifact:arg value="-X"/>&ndash;&gt;-->
    <!--</artifact:mvn>-->
    <!--</target>-->

    <target name="distribute-release" description="Does a real release">
        <property file="version.properties"/>
        <property name="version" value="${jsonos.version.major}.${jsonos.version.minor}"/>

        <!--<input addproperty="sonatype.username" message="Sonatype username"/>-->
        <!--<input addproperty="sonatype.password" message="Sonatype password"/>-->
        <!--<input addproperty="gpg.passphrase" message="GPG passphrase"/>-->

        <input addproperty="sourceforge.username" message="Sourceforge username"/>
        <input addproperty="sourceforge.password" message="Sourceforge password"/>
        <!--TODO get code revision of trunk -->
        <!--<property name="release.revision" value="${git.info.rev}"/>-->
        <!--<echo message="Attempting to release revison ${release.revision}"/>-->
        <!--<property name="release.directory" value="${location.build}/release/${release.revision}"/>-->
        <property name="release.directory" value="."/>
        <subant target="prepare-release" buildpath="${release.directory}">
            <property name="sonatype.username" value="${sonatype.username}"/>
            <property name="sonatype.password" value="${sonatype.password}"/>
            <property name="gpg.passphrase" value="${gpg.passphrase}"/>
        </subant>
        <!--<delete dir="${location.build}"/>-->
        <antcall target="prepare-release"/>
        <!--TODO export trunk -->
        <!--<subant target="prepare-release" buildpath="${release.directory}"/>-->
        <!--<property file="${release.directory}/version.properties"/>-->
        <!--<property name="version" value="${jsonos.version.major}.${jsonos.version.minor}"/>-->
        <!--TODO tag release revision -->
        <sshexec host="shell.sourceforge.net" username="${sourceforge.username},jsonos"
                 password="${sourceforge.password}"
                 command="create" trust="true"/>
        <!--<scp todir="${sourceforge.username},jsonos@web.sourceforge.net:/home/project-web/jsonos/"-->
        <!--password="${sourceforge.password}" trust="true">-->
        <!--<fileset dir="${release.directory}/build/dist/documentation/"/>-->
        <!--</scp>-->
        <scp todir="${sourceforge.username},jsonos@web.sourceforge.net:/home/frs/project/j/js/jsonos/"
             password="${sourceforge.password}" trust="true">
            <fileset dir="${release.directory}/build/dist/binaries/"/>
        </scp>
        <!--<sshexec host="shell.sourceforge.net" username="${sourceforge.username},jsonos"-->
        <!--password="${sourceforge.password}"-->
        <!--command="rm /home/project-web/jsonos/htdocs ; ln -s /home/project-web/jsonos/${version} /home/project-web/jsonos/htdocs"-->
        <!--trust="true"/>-->
        <!--<antcall target="distribute-release-maven"/>-->
        <propertyfile file="version.properties">
            <entry key="jsonos.version.minor" type="int" default="0" operation="+"/>
        </propertyfile>
        <!--TODO commit post-release version.properties -->
    </target>

</project>